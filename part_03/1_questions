
Answer the following questions


1) What is an instance variable?
 A piece of data defined by a class

2) How do you create a new object?

    Fruit guava = new Fruit();


3) After creating a new object, how do you set that objects instance variables?
    object.member
    guava.color = "green";

4) What is a reference variable? Why do you need to be careful with reference variables?
    The variable references a location in memory. When having multiple objects referencing the same variable they
    are manipulating the same value and not a copy of the value

5) How many methods can you have in a class?
   At most 65535

6) How do you exit a method at any point?
 Issuing a return statement

7) What is the method signature required to return an "int" from a method?

    class tuna (int x){
    \\ code goes here
    }


8) Assuming "int num = 10", what is the syntax to return "num" from a method?

System.out.println(num);

9) How do you pass a parameter to a method?

int methodName(parameter a, parameter b){
    // parameters can be manipulated inside the method
}

10) What is the method signature for a method named sum() that takes two int parameters and returns their sum as in int?
    sum(int num1, int num2){
        int sum = num1 + num2;
        System.out.println("The sum of the two numbers is: " + sum);
    }

11) What is a constructor?
    It initializes an object and typically gives values to instance variables

12) How does Java treat a class without a constructor?
    Java will provide a default constructor that initializes instance variables to their default values

13) What would the constructor for "public class Animal" look like?

    Animal(){
        \\ code goes here
    }

14) What is the effect of passing parameters to a constructor?
        Passing parameters initializes variables the same way you do with methods

15) When should you pass parameters to a constructor?
        It's best to initialize variables via constructor by passing parameters to constructor

16) What does the finalize() method do?

It helps ensure that an object terminates cleanly before it is recycled by the garbage collector


17) What does the "this" keyword do?

The this keyword is used to refer to the members of a class if local variables have the same name

18) When should you use the "this" keyword?

When the parameters in the constructor have the same name as the instance variables

19) Write an example of the "this" keyword in action.

class Protein{
    String pork;
    String beef;

    Protein(String pork, String beef){
        this.pork = pork;
        this.beef = beef;
    }
}


20.) EXplain the difference between static and non-static variables.
Static variables are global. They belong to class instead of an object. Can be accessed by class name and one
copy is shared by all variables
class_name.variable_name

Nonstatic variables are specific to an object. Can be accessed with object reference.
object_ref.variable_name

21.) Explain the difference between static and non-static methods.
Static method can only access static data. Static cannot refer to "this" or "super" keywords. Can be accessed
by class name and doesnt need an object.

className.methodname();

Nonstatic methods are specific to an object
Objref.methodname();